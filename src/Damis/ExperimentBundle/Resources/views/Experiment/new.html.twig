{% extends 'BaseMainBundle::layout.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    {% stylesheets 'bundles/damisexperiment/css/*' filter='cssrewrite' %}
        <link rel="stylesheet" href="{{ asset_url }}" />
    {% endstylesheets %}
{% endblock %}
{% block body %}
<div class="tabbable">
    <div class="tab-content">
        <div>
        {% include "DamisDatasetsBundle::messages.html.twig" %}
        {% include "DamisExperimentBundle::_experiment_form.html.twig" with { components : components } %}
        <div id="workflow-editor-container">
            <div id="toolbox-container">
                <ul class="nav nav-tabs" id="cluster-tabs">
                    {% for cluster in clusters %}
                    <li id="cluster-{{ cluster.id }}-tab" {% if loop.index == 1 %}class="active"{% endif %}>
                        <a href="#">{{ cluster.name }}</a>
                        <span>
                            <i class="component-tooltip cluster-tooltip icon-info-sign" data-placement="bottom"
                               data-content="{{ cluster.desciption }}" style="cursor: pointer">
                                <span style="display: none;">Cluster information</span>
                            </i>
                        </span>
                    </li>
                    {% endfor %}
                </ul>
                <div id="toolbox">
                    {% for cluster in clusters %}
                        <div id="cluster-{{ cluster.id }}-panel" {% if loop.index != 1 %}style="display:none"{% endif %}>
                            {% for category in componentsCategories %}
                            {% spaceless %}
                                <h3 {% if loop.index == 1 %}class="first"{% endif %}>
                                    {{ category.getType | trans({}, 'ExperimentBundle') }}
                                </h3>
                                <div style="padding: 0;">
                                    <div class="tools-padding">
                                    {% for component in components
                                        if (component.clusterId == cluster and component.typeId == category) %}
                                        <div class="prototype-box">
                                            <img src="{{ asset('bundles/damisexperiment/images/' ~ component.getIcon) }}"
                                                 width="64px" height="64px" />
                                            <i style="cursor:pointer; " class="component-tooltip icon-info-sign"
                                               data-placement="bottom" data-content="Upload file for data analysis"
                                               data-original-title="" title="">
                                                <span style="display: none;">{{ component.getName | trans({}, 'ExperimentBundle') }}</span>
                                            </i>
                                            <div class="desc">
                                                <div>{{ component.getName | trans({}, 'ExperimentBundle') }}</div>
                                            </div><input type="hidden" value="{{ component.getId }}"></div>
                                    {% endfor %}
                                    </div>
                                </div>
                            {% endspaceless %}
                            {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <div id="canvas">
                <div id="flowchart-container" />
            </div>
        </div>
        <div id="buttons-block" class="pull-right">
            <button class="btn" type="button" id="new-experiment-btn">{{ "New experiment"| trans({}, 'ExperimentBundle')  }}</button>
            <button class="btn" type="button" id="save-btn">{{ "Save"| trans({}, 'ExperimentBundle')  }}</button>
            <button class="btn btn-primary" type="button" id="execute-btn">{{"Execute"| trans({}, 'ExperimentBundle')   }}</button>
        </div>
    </div>
</div>
    <form id="file-upload-form" method="POST" action="{{ path('dataset_upload_handler') }}" enctype="multipart/form-data" target="file-upload-iframe" style="display:none;" autocomplete="off"></form>
    <iframe id="file-upload-iframe" name="file-upload-iframe" style="display: none;"></iframe>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% javascripts '@DamisExperimentBundle/Resources/public/js/*' %}
        <script type="text/javascript" src="{{ asset_url }}"></script>
    {% endjavascripts %}


    <script type="text/javascript">
 (function() {
        jsPlumb.ready(function() {
            // jsPlumb initialization
            experimentCanvas.init({
                id: "flowchart-container"
            });

            // mapping native components to Ajax urls for dialog rendering
            window.componentFormUrls = {};
            window.componentFormUrls['UPLOAD FILE'] = "{{ path('dataset_upload') }}";

            window.componentSettings.details = {};
            {% for component in components %}
            window.componentSettings.details["{{ component.getId }}"] = {
                type: "{{ component.getTypeId.id }}",
                label: "{{ component.getName }}",
                ico: "{{ asset('bundles/damisexperiment/images/' ~ component.getIcon) }}",
                cluster_ico: "{{ asset('bundles/damisexperiment/images/cluster_' ~ component.clusterId.id ~ '_icon.jpeg') }}"
            };
            {% endfor %}

            window.experimentForm.params = {
                {#parameterPrefixesUrl: "{% url 'gen-parameter-prefixes' %}",#}
                experimentNewUrl: "{{ path('new_experiment') }}",
                taskFormPrefix: "form-111-"
            };

            //decide if an empty canvas or a persisted worklow should be
            //displayed
            var persistedStr = $("#id_experiment-workflow_state").val();
            if (persistedStr) {
                jsPlumb.setSuspendDrawing(true);

                window.persistWorkflow.restoreBoxes(persistedStr);
                window.persistWorkflow.restoreCountBoxes(persistedStr);

                window.experimentForm.init();
                window.experimentForm.reinitExperimentForm();

                window.persistWorkflow.restoreConnections(persistedStr);
                jsPlumb.setSuspendDrawing(false, true);
            } else {
                window.experimentForm.init();
            }

            window.toolBox = {
                // Make boxes in the toolbox draggable
                init: function(spec) {
                    // drag task
                    $(spec.task).draggable({
                        appendTo: spec.canvas,
                        helper: "clone"
                    });
                    $(spec.canvas).droppable({
                        activeClass: "active-canvas",
                        accept: spec.task,
                        drop: function(ev, ui) {
                            if ($(ui.draggable).hasClass(spec.task.replace(".", ""))) {
                                window.taskBoxes.createTaskBox(ev, ui, spec.canvas);
                                return;
                            }
                        }
                    });
                }
            }

            window.toolBox.init({
                task: ".prototype-box",
                canvas: "#flowchart-container"});

        });
 })();
    </script>
{% endblock %}