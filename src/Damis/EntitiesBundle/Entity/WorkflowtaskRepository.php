<?php

namespace Damis\EntitiesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
*
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkflowtaskRepository extends EntityRepository
{
    /**
     * Get all tasks which can be run (experiment is set to executing, and tasks have not null in parameters)
     *
     * @param $limit
     * @return array
     */
    public function getRunnableTasks($limit)
    {
        $query = $this->createQueryBuilder('w')
            ->select('w')
            ->leftJoin('w.experiment', 'e')
            ->leftJoin('DamisEntitiesBundle:Parametervalue', 'pv', 'with', 'pv.workflowtask = w')
            ->leftJoin('DamisEntitiesBundle:Pvalueoutpvaluein', 'pio', 'with', 'pv.parametervalueid = pio.inparametervalue')
            ->andWhere('e.status = 2')
            ->andWhere('w.workflowtaskisrunning = 0')
            ->andWhere('pio.outparametervalue IS NOT NULL')
            ->andWhere('pv.parametervalue IS NOT NULL')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    /**
     * Find all tasks which are unrunnable by nature (component type is 1[entry file] or 6[show information])
     *
     * @param $limit
     * @return array
     */
    public function getUnrunableTasks($limit)
    {
        $query = $this->createQueryBuilder('w')
            ->select('w')
            ->leftJoin('w.experiment', 'e')
            ->leftJoin('DamisEntitiesBundle:Parametervalue', 'pv', 'with', 'pv.workflowtask = w')
            ->leftJoin('pv.parameter', 'p')
            ->leftJoin('p.component', 'c')
            ->andWhere('e.status = 2')
            ->andWhere('w.workflowtaskisrunning = 0')
            ->andWhere('c.typeId = 1 or c.typeId = 6')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }
}
