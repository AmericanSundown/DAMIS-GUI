<?php

namespace Damis\EntitiesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
*
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParametervalueRepository extends EntityRepository
{
    /**
     * Get parameter values for a task, ordered by component parameter values
     *
     * @param $workflowTask
     * @return array
     */
    public function getOrderedParameters($workflowTask)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv')
            ->leftJoin('pv.parameter', 'p')
            ->andWhere('pv.workflowtask = :w')
            ->setParameter('w', $workflowTask)
            ->addOrderBy('p.position', 'ASC');

        return $query->getQuery()->getResult();
    }

    /**
     * Get tasks parameter value, by parameters slug
     *
     * @param $task
     * @param $slug
     * @return mixed
     */
    public function getValueBySlug($task, $slug)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv.parametervalue')
            ->leftJoin('pv.parameter', 'p')
            ->andWhere('pv.workflowtask = :w')
            ->andWhere('p.slug = :s')
            ->setParameter('w', $task)
            ->setParameter('s', $slug)
            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Get tasks parameter, by parameter type
     *
     * @param $task
     * @param $type
     * @return mixed
     */
    public function getParameterByType($task, $type)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv')
            ->leftJoin('pv.parameter', 'p')
            ->andWhere('pv.workflowtask = :w')
            ->andWhere('p.connectionType = :s')
            ->setParameter('w', $task)
            ->setParameter('s', $type)
            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Get tasks parameter value, by parameter type
     *
     * @param $task
     * @param $type
     * @return mixed
     */
    public function getValueByType($task, $type)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv.parametervalue')
            ->leftJoin('pv.parameter', 'p')
            ->andWhere('pv.workflowtask = :w')
            ->andWhere('p.connectionType = :s')
            ->setParameter('w', $task)
            ->setParameter('s', $type)
            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Checks if dataser is in use in experiment
     *
     * @param int $id
     * @return mixed
     */
    public function checkDatasets($id)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv')
            ->leftJoin('pv.parameter', 'p')
            ->andWhere('pv.parametervalue = :id')
            ->andWhere('p.connectionType = 2')
            ->setParameter('id', $id)
            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Returns experiment datasets
     *
     * @param int $id
     * @return array
     */
    public function getExperimentDatasets($id)
    {
        $query = $this->createQueryBuilder('pv')
            ->select('pv.parametervalue')
            ->leftJoin('pv.parameter', 'p')
            ->leftJoin('pv.workflowtask', 'w')
            ->leftJoin('w.experiment', 'e')
            ->andWhere('p.connectionType = 2')
            ->andWhere('e.id = :id')
            ->setParameter('id', $id);

        return $query->getQuery()->getResult();
    }
}
